# -*- coding: utf-8 -*-
"""obtain_patterns.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xfcJcN3RbEiamNDpHLt8kJ04y-6Jbz-P
"""

import pandas as pd
import re

def load_and_clean_data(file_path):
    ocr_data_filtered = pd.read_csv(file_path)
    ocr_data_filtered['text_review'] = ocr_data_filtered['text_review'].str.replace('|', '', regex=False)
    ocr_data_filtered['text_review'] = ocr_data_filtered['text_review'].str.replace("(", '', regex=False)
    ocr_data_filtered['text_review'] = ocr_data_filtered['text_review'].str.replace(")", '', regex=False)
    ocr_data_filtered['text_review'] = ocr_data_filtered['text_review'].str.replace(".", '-', regex=False)
    return ocr_data_filtered

def filter_data_based_on_char_count(ocr_data, num_most_common_chars=2):
    ocr_data['num_chars'] = ocr_data['text_review'].apply(len)
    most_common_chars = ocr_data['num_chars'].value_counts().head(num_most_common_chars).index.tolist()
    return ocr_data[ocr_data['num_chars'].isin(most_common_chars)], most_common_chars

def generate_regex_patterns_and_templates(texts):
    char_counters = [{} for _ in range(len(texts[0]))]
    for text in texts:
        for i, char in enumerate(text):
            char_type = 'D' if char.isdigit() else 'L' if char.isalpha() else char
            char_counters[i][char_type] = char_counters[i].get(char_type, 0) + 1

    regex_parts = []
    for counter in char_counters:
        most_common_char_type, _ = max(counter.items(), key=lambda item: item[1])
        regex_parts.append('\\d' if most_common_char_type == 'D' else '[A-Za-z]' if most_common_char_type == 'L' else most_common_char_type)

    regex_pattern = ''.join(regex_parts)
    if '"' in regex_pattern:
        regex_pattern = re.sub(r'\"', r'(?:\\d{0,2}")', regex_pattern)

    template = regex_pattern.replace('\\d', '#').replace('[A-Za-z]', 'X')
    return regex_pattern, template

def determine_and_display_patterns(ocr_data, most_common_chars):
    regex_patterns_and_templates = {}
    for count in most_common_chars:
        texts_for_count = ocr_data[ocr_data['num_chars'] == count]['text_review'].tolist()
        regex_pattern, template = generate_regex_patterns_and_templates(texts_for_count)
        regex_patterns_and_templates[count] = {
            'regex_pattern': regex_pattern,
            'template': template
        }

    TUBERIA_PATTERN_KEY = max(regex_patterns_and_templates.keys())
    TAG_PATTERN_KEY = min(regex_patterns_and_templates.keys())
    regex_patterns_and_templates = {
        'TUBERIA_PATTERN': regex_patterns_and_templates[TUBERIA_PATTERN_KEY],
        'TAG_PATTERN': regex_patterns_and_templates[TAG_PATTERN_KEY]
    }

    exact_patterns = {key: value['regex_pattern'] for key, value in regex_patterns_and_templates.items()}
    return regex_patterns_and_templates, exact_patterns

if __name__ == "__main__":
    file_path = '/content/ocr_data_final_filtered.csv'
    ocr_data_filtered = load_and_clean_data(file_path)

    filtered_data, most_common_chars = filter_data_based_on_char_count(ocr_data_filtered)
    filtered_data.to_csv('/content/ocr_data_filtered_common_chars.csv', index=True)

    regex_patterns_and_templates, exact_patterns = determine_and_display_patterns(filtered_data, most_common_chars)
    print("Generated Regex Patterns and Templates:")
    print(regex_patterns_and_templates)
    print("Exact Patterns:")
    print(exact_patterns)